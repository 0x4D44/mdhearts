#!/usr/bin/env python3
"""Compare two Stage 2 benchmark runs.

Consumes the Markdown summaries generated by `hearts-bench` along with the
telemetry JSON summaries and prints a side-by-side table highlighting PPH,
win rates, moon rates, and telemetry counts. Optionally emits Markdown for
inclusion in status reports.
"""

from __future__ import annotations

import argparse
import json
import re
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Tuple


@dataclass
class AgentStats:
    avg_pph: float
    delta_vs_baseline: float
    win_pct: float
    moon_pct: float


@dataclass
class RunSummary:
    name: str
    agents: Dict[str, AgentStats]
    pass_events: int
    avg_pass_score: float | None
    avg_moon_probability: float | None
    play_objectives: Dict[str, int]


SUMMARY_ROW = re.compile(
    r"^\|\s*(?P<agent>[^|]+)\s*\|\s*(?P<kind>[^|]+)\s*\|\s*(?P<hands>[^|]+)\s*\|\s*(?P<avg_pph>[^|]+)\s*\|\s*(?P<delta>[^|]+)\s*\|\s*(?P<ci>[^|]+)\s*\|\s*(?P<win>[^|]+)\s*\|\s*(?P<moon>[^|]+)\s*\|"
)


def parse_summary(path: Path) -> Dict[str, AgentStats]:
    stats: Dict[str, AgentStats] = {}
    with path.open("r", encoding="utf-8") as handle:
        for line in handle:
            if not line.startswith("|"):
                continue
            columns = [col.strip() for col in line.strip().strip("|").split("|")]
            if len(columns) < 8 or not columns[0].startswith("baseline"):
                continue
            agent = columns[0]
            try:
                avg_pph = float(columns[3])
                delta = float(columns[4].replace("+", ""))
                win_pct = float(columns[6].rstrip("%"))
                moon_pct = float(columns[7].rstrip("%"))
            except ValueError:
                continue
            stats[agent] = AgentStats(
                avg_pph=avg_pph,
                delta_vs_baseline=delta,
                win_pct=win_pct,
                moon_pct=moon_pct,
            )
    return stats


def load_telemetry(path: Path) -> Tuple[int, float | None, float | None, Dict[str, int]]:
    if not path.exists():
        return (0, None, None, {})
    data = json.loads(path.read_text(encoding="utf-8"))
    pass_summary = data.get("pass", {})
    play_summary = data.get("play", {})
    return (
        int(pass_summary.get("count", 0)),
        pass_summary.get("avg_total"),
        pass_summary.get("avg_moon_probability"),
        {
            key: int(value)
            for key, value in play_summary.get("objective_counts", {}).items()
        },
    )


def load_run(name: str, directory: Path) -> RunSummary:
    summary_path = directory / "summary.md"
    telemetry_path = directory / "telemetry_summary.json"
    agents = parse_summary(summary_path)
    pass_events, avg_pass_score, avg_moon_probability, play_objectives = load_telemetry(
        telemetry_path
    )
    return RunSummary(
        name=name,
        agents=agents,
        pass_events=pass_events,
        avg_pass_score=avg_pass_score,
        avg_moon_probability=avg_moon_probability,
        play_objectives=play_objectives,
    )


def render_table(a: RunSummary, b: RunSummary) -> str:
    agents: List[str] = sorted(set(a.agents.keys()) | set(b.agents.keys()))
    lines = [
        "| Agent | {0} Avg PPH | {1} Avg PPH | Δ ({0} − {1}) | {0} Win % | {1} Win % | {0} Moon % | {1} Moon % |".format(
            a.name, b.name
        ),
        "|-------|" + "--------|" * 7,
    ]
    for agent in agents:
        aa = a.agents.get(agent)
        bb = b.agents.get(agent)
        if not aa or not bb:
            continue
        delta = aa.avg_pph - bb.avg_pph
        lines.append(
            "| {agent} | {a_pph:.3f} | {b_pph:.3f} | {delta:+.3f} | {a_win:.1f}% | {b_win:.1f}% | {a_moon:.1f}% | {b_moon:.1f}% |".format(
                agent=agent,
                a_pph=aa.avg_pph,
                b_pph=bb.avg_pph,
                delta=delta,
                a_win=aa.win_pct,
                b_win=bb.win_pct,
                a_moon=aa.moon_pct,
                b_moon=bb.moon_pct,
            )
        )
    return "\n".join(lines)


def render_telemetry(a: RunSummary, b: RunSummary) -> str:
    lines = [
        "### Telemetry Snapshot",
        f"- {a.name}: {a.pass_events} pass events, avg pass score "
        + (f"{a.avg_pass_score:.2f}" if a.avg_pass_score is not None else "n/a")
        + ", avg moon probability "
        + (f"{a.avg_moon_probability:.3f}" if a.avg_moon_probability is not None else "n/a"),
        f"- {b.name}: {b.pass_events} pass events, avg pass score "
        + (f"{b.avg_pass_score:.2f}" if b.avg_pass_score is not None else "n/a")
        + ", avg moon probability "
        + (f"{b.avg_moon_probability:.3f}" if b.avg_moon_probability is not None else "n/a"),
    ]
    lines.append("- Play objectives:")
    labels = sorted(set(a.play_objectives) | set(b.play_objectives))
    for label in labels:
        lines.append(
            f"  - {label}: {a.name}={a.play_objectives.get(label, 0)}, {b.name}={b.play_objectives.get(label, 0)}"
        )
    return "\n".join(lines)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("run_a", type=Path, help="First run directory (e.g., bench/out/stage2_pass_moon)")
    parser.add_argument("run_b", type=Path, help="Second run directory for comparison")
    parser.add_argument("--label-a", default="run_a", help="Label for the first run (default: run_a)")
    parser.add_argument("--label-b", default="run_b", help="Label for the second run (default: run_b)")
    parser.add_argument(
        "--markdown-output",
        type=Path,
        help="Optional path to write the comparison table and telemetry snapshot in Markdown",
    )
    args = parser.parse_args()

    run_a = load_run(args.label_a, args.run_a)
    run_b = load_run(args.label_b, args.run_b)

    table = render_table(run_a, run_b)
    telemetry = render_telemetry(run_a, run_b)

    print(table)
    print()
    print(telemetry)

    if args.markdown_output:
        args.markdown_output.write_text(
            f"{table}\n\n{telemetry}\n",
            encoding="utf-8",
        )


if __name__ == "__main__":
    main()
