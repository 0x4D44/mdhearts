#!/usr/bin/env python3
"""Convert telemetry CSV rows into a Markdown table.

Accepts one or more CSV files generated by `tools/analyze_telemetry.py` and
emits a compact table summarising pass/play counts, block ratios, and average
scores. Designed for quick inclusion in docs/decks without opening a notebook.
"""

from __future__ import annotations

import argparse
import csv
from pathlib import Path
from typing import List


def load_rows(paths: List[Path]) -> List[dict]:
    rows: List[dict] = []
    for path in paths:
        with path.open("r", encoding="utf-8") as handle:
            reader = csv.DictReader(handle)
            for row in reader:
                row["_source"] = path.stem
                rows.append(row)
    return rows


def format_float(raw: str, digits: int = 3) -> str:
    if raw is None or raw == "":
        return "n/a"
    try:
        value = float(raw)
    except ValueError:
        return raw
    return f"{value:.{digits}f}"


def render_table(rows: List[dict], label_field: str) -> str:
    headers = [
        "Run",
        "Pass Count",
        "Pass Block Ratio",
        "Avg Pass Score",
        "Avg Pass Moon Prob",
        "Play Count",
        "Play Block Ratio",
    ]
    lines = [
        "| " + " | ".join(headers) + " |",
        "| " + " | ".join(["---"] * len(headers)) + " |",
    ]
    for row in rows:
        label = row.get(label_field) or row.get("run_id") or row.get("_source", "run")
        lines.append(
            "| {label} | {pass_count} | {pass_ratio} | {pass_score} | {pass_prob} | {play_count} | {play_ratio} |".format(
                label=label,
                pass_count=row.get("pass_count", "0"),
                pass_ratio=format_float(row.get("pass_block_ratio"), 3),
                pass_score=format_float(row.get("pass_avg_score"), 2),
                pass_prob=format_float(row.get("pass_avg_moon_probability"), 3),
                play_count=row.get("play_count", "0"),
                play_ratio=format_float(row.get("play_block_ratio"), 3),
            )
        )
    return "\n".join(lines)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "csv",
        nargs="+",
        type=Path,
        help="Telemetry CSV file(s) emitted by tools/analyze_telemetry.py",
    )
    parser.add_argument(
        "--label-field",
        default="run_id",
        help="Column to use for the run label (default: run_id)",
    )
    parser.add_argument(
        "--output",
        type=Path,
        help="Optional Markdown file to write; otherwise prints to stdout",
    )
    args = parser.parse_args()

    rows = load_rows(args.csv)
    if not rows:
        raise SystemExit("No telemetry rows found in supplied CSV files")

    table = render_table(rows, args.label_field)

    if args.output:
        args.output.write_text(table + "\n", encoding="utf-8")
    else:
        print(table)


if __name__ == "__main__":
    main()
